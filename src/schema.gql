type Query {
  getProductById(productId: ID!): Product
  getShoppingCartById(shoppingCartId: ID!): ShoppingCart
}
type Mutation {
  createProduct(productName: String!, unitPrice: Float!): Product
  createShoppingCart: ShoppingCart
  # createShoppingCartItem: ShoppingCartItem
  addItemToShoppingCart(input: ShoppingCartItemInput): ShoppingCart
  # updateShoppingCartWithNewItem: ShoppingCart
  deleteAItemFromShoppingCart: DeleteResourceResponse
  deleteAllItemsFromShoppingCart: DeleteResourceResponse
}

type DeleteResourceResponse {
  deletedXId: ID
  success: Boolean
}
type ShoppingCart {
  shoppingCartId: ID
  shoppingCartItems: [ShoppingCartItem]
  totalPrice: Float
}
# type Product {
#   productId: ID
#   productName: String
#   unitPrice: Float
# }
# type ShoppingCartItem {
#   shoppingCartId: ID
#   product: Product
#   quantity: Int
# }
type Product {
  productId: ID
  productName: String
  unitPrice: Float
}
type ShoppingCartItem {
  productId: ID
  productName: String
  unitPrice: Float
  quantity: Int
}
input ShoppingCartItemInput {
  productId: ID!
  shoppingCartId: ID!
}
