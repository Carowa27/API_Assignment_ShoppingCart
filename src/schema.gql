type Query {
  getProductById(productId: ID!): Product
  getShoppingCartById(shoppingCartId: ID!): ShoppingCart
}
type Mutation {
  createProduct(productName: String!, unitPrice: Float!): Product
  createShoppingCart: ShoppingCart
  # createShoppingCartItem: ShoppingCartItem
  addItemToShoppingCart(input: ShoppingInputIds): ShoppingCart
  removeItemToShoppingCart(input: ShoppingInputIds): ShoppingCart
  deleteAnItemFromShoppingCart(input: ShoppingInputIds): DeleteResourceResponse
  deleteShoppingCart(shoppingCartId: ID!): DeleteResourceResponse
}

type DeleteResourceResponse {
  deletedId: ID
  success: Boolean
}
type ShoppingCart {
  shoppingCartId: ID
  shoppingCartItems: [ShoppingCartItem]
  totalPrice: Float
}
type Product {
  productId: ID
  productName: String
  unitPrice: Float
}
type ShoppingCartItem {
  productId: ID
  productName: String
  unitPrice: Float
  quantity: Int
}
input ShoppingInputIds {
  productId: ID!
  shoppingCartId: ID!
}
# enum ProductName{
#   "ProductNamn"
# }
